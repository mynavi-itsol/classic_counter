1. コードベース
  - GitやSVGで管理しましょう。
  - デプロイするものは、バージョンが異なっても構いませんが、全てそれらにあるものをベースとしたものにしましょう。
2. 依存関係
  - 依存関係を明確にする。
  - 暗黙的に存在するもの(グローバルインストールされたもの)がないように明記する。
3. 設定
  - 環境変数に認証情報などの設定を格納する
  - 極端な話、認証情報を洩らさずにオープンソース化できるならOK
4. バックエンドサービス
  - バックエンドとのつながりを、可能な限り租にする。
  - 例えば、バックエンドがオンプレからクラウドサービスに差し代わっても問題のないように。
  - APIサーバー化みたいなイメージ？
5. ビルド、リリース、実行
  - ビルドとリリースと実行状態を明確に区分する
  - 特に実行状態は、エラーを起因とするリブートにより自動で立ち上げなおされても特に問題のないように
6. プロセス
  - アプリケーション自体はステートレスであり、データはDB等で保持すること
7. ポートバインディング
  - ポートバインディングすること
8. 並行性
  - プロセスによりスケールアウトしやすい作りを目指す
  - できるだけデーモン化は避ける
9. 廃棄容易性
  - 即座に起動し、即座に終了できる
  - グレースフルシャットダウン
10. 開発/本番一致
  - 開発、ステージング、本番環境をできるだけ一致させた状態を保つ
11. ログ
  - ログをイベントストリームとして扱う
  - できるだけ、アプリケーションはログのことを関知しない
12. 管理プロセス
  - 管理するプロセスはできるだけまとまる